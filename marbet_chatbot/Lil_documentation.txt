# Create project structure
mkdir -p marbet_chatbot/docs
mkdir -p marbet_chatbot/chroma_db
mkdir -p marbet_chatbot/tests

# Create necessary Python files
touch marbet_chatbot/__init__.py
touch marbet_chatbot/document_processor.py
touch marbet_chatbot/rag_pipeline.py
touch marbet_chatbot/chatbot.py
touch marbet_chatbot/main.py
touch marbet_chatbot/requirements.txt

# Create requirements.txt file
cat > marbet_chatbot/requirements.txt << 'EOL'
# Core dependencies
langchain>=0.1.0
langchain-community>=0.0.11
langchain-ollama>=0.0.1
langchain-text-splitters>=0.0.1
langchain-core>=0.1.5
chromadb>=0.4.18
pydantic>=2.5.2
PyPDF2>=3.0.0
pandas>=2.0.0

# API mode dependencies (optional)
fastapi>=0.104.1
uvicorn>=0.24.0

# Testing and development
pytest>=7.4.3
black>=23.11.0
isort>=5.12.0
pylint>=3.0.2
EOL

# Copy documents to the docs directory
# (Assuming the PDF files are in the current directory)
cp *.pdf marbet_chatbot/docs/

# Create README file
cat > marbet_chatbot/README.md << 'EOL'
# Marbet Event Assistant Chatbot

## Overview
This chatbot provides AI-powered assistance for Marbet's event management needs, particularly for their incentive trips. The chatbot uses Retrieval-Augmented Generation (RAG) to provide accurate information about schedules, activities, travel requirements, ship services, and policies.

## Features
- Document processing and analysis
- RAG-enhanced response generation
- Conversational memory for context-aware responses
- Command-line interface
- Optional API server mode

## Setup Instructions

### Prerequisites
- Python 3.9 or higher
- Access to the Ollama server

### Installation
1. Clone this repository
2. Install required packages:
   ```
   pip install -r requirements.txt
   ```
3. Place your document files in the `docs` directory

### Running the Chatbot
Command-line mode:
```
python main.py --mode cli
```

API server mode:
```
python main.py --mode api --host 0.0.0.0 --port 8000
```

## Project Structure
- `document_processor.py`: Document loading and preprocessing
- `rag_pipeline.py`: RAG implementation using LangChain and Ollama
- `chatbot.py`: Main chatbot interface and logic
- `main.py`: Entry point for running the application
- `docs/`: Directory for document files
- `chroma_db/`: Directory for the vector database

## Configuration Options
- `--mode`: Run mode (cli or api)
- `--rebuild`: Rebuild the vector database
- `--docs-dir`: Directory containing documents
- `--db-dir`: Directory for vector database
- `--ollama-url`: Ollama server URL
- `--model`: Model name to use

## Credits
Developed for the Marbet challenge by [Your Name]
EOL

echo "Project structure created successfully!"